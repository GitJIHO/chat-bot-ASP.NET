@page "/"
@using InterviewAssistant.Common.Models
@using InterviewAssistant.Web.Services
@using Markdig
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@inject IChatService ChatService
@inject IJSRuntime JSRuntime
@inject ILogger<Home> Logger
@rendermode InteractiveServer

<PageTitle>면접 코치 - InterviewAssistant</PageTitle>

<!-- 메인 채팅 영역 -->
<div class="chat-main">
    <!-- 채팅 메시지 영역 -->
    <div class="chat-messages" id="chatMessages">
        @if (messages.Count == 0)
        {
            <div class="welcome-message">
                <h2>챗봇에 오신 것을 환영합니다!</h2>
                <p>아래 입력창에 질문을 입력해보세요.</p>
            </div>
        }
        else
        {
            @foreach (var message in messages)
            {
                <div class="message @(message.Role == MessageRoleType.User ? "user-message" : "bot-message")">
                    <div class="message-content">
                        @((MarkupString)Markdown.ToHtml(message.Message).Trim())
                    </div>
                </div>
            }
        }
        @if (isLoading)
        {
            <div class="message bot-message">
                <div class="message-content">
                    <div class="loading-dots">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- 입력 영역 -->
    <div class="chat-input-container">
        <div class="input-wrapper">
            <textarea 
                id="messageInput"
                @bind="userInput" 
                @bind:event="oninput" 
                @onkeydown="HandleKeyDown" 
                placeholder="메시지를 입력하세요." 
                rows="1"
                disabled="@(isLoading)"></textarea>
            <button class="send-btn" @onclick="SendMessage" disabled="@IsReadyToSendMessage()">
                <span class="send-icon">↵</span>
            </button>
        </div>
        @if (!isServerOutputEnded)
        {
            <div class="response-status">
                <small>서버 응답 출력 중... 출력이 완료될 때까지 기다려주세요.</small>
            </div>
        }
    </div>
</div>

@code {
    private List<ChatMessage> messages = new List<ChatMessage>();
    private string userInput = string.Empty;
    private bool isLoading = false;
    private bool isServerOutputEnded = true;
    private bool isSend = false;

    //Blazor 컴포넌트가 처음 초기화될 때 자동으로 호출
    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
    }

    // 키 입력 처리 (엔터키로 메시지 전송)
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Repeat || isSend) return;
        isSend = true;
        try
        {
            if (e.Key == "Enter" && !e.ShiftKey)
            {
                var actualValue = await JSRuntime.InvokeAsync<string>("getTextAreaValue", "messageInput");
                if (!string.IsNullOrWhiteSpace(actualValue))
                {
                    userInput = actualValue.TrimEnd('\n', '\r');
                    await SendMessage();
                }
            }
        }
        finally
        {
            isSend = false;
        }
    }

    // 메시지 전송 - 서비스 사용
    private async Task SendMessage()
    {
        if (IsReadyToSendMessage())
        {
            return;
        }

        var userMessage = new ChatMessage { Role = MessageRoleType.User, Message = userInput };
        messages.Add(userMessage);

        await JSRuntime.InvokeVoidAsync("resetAutoScroll");
        userInput = string.Empty;

        await ScrollToBottom();

        try
        {
            isLoading = true;
            isServerOutputEnded = false;
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("forceScrollToBottom", "chatMessages");

            var responses = ChatService.SendMessageAsync(messages);

            var assistantMessage = new ChatMessage { Role = MessageRoleType.Assistant, Message = string.Empty };
            messages.Add(assistantMessage);

            bool first = true;
            await foreach (var response in responses)
            {    
                if (first)
                {
                    isLoading = false;
                    first = false;
                    StateHasChanged();
                    await JSRuntime.InvokeVoidAsync("resetAutoScroll");
                    await JSRuntime.InvokeVoidAsync("forceScrollToBottom", "chatMessages");
                }
                assistantMessage.Message += response.Message;
                await ScrollToBottom();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage { Role = MessageRoleType.Assistant, Message = $"오류가 발생했습니다: {ex.Message}" });
            Logger.LogError(ex, "메시지 전송 중 오류 발생");
        }
        finally
        {
            isServerOutputEnded = true;
            StateHasChanged();
            await ScrollToBottom();
            await JSRuntime.InvokeVoidAsync("resetTextAreaHeight", "messageInput");
            await JSRuntime.InvokeVoidAsync("focusTextArea", "messageInput");
        }
    }

    private bool IsReadyToSendMessage()
    {
        return string.IsNullOrWhiteSpace(userInput) || isLoading || !isServerOutputEnded;
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(50);
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatMessages");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setupTextAreaResize", "messageInput");
            await JSRuntime.InvokeVoidAsync("setupAutoScrollDetection", "chatMessages");
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}